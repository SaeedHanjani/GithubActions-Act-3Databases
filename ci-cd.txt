name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          pip install -r requirements.txt

      - name: Send Telegram Alarm
        run: |
          python telegram_alarm.py "${{ secrets.TELEGRAM_BOT_TOKEN }}" "${{ secrets.TELEGRAM_CHAT_ID }}" "Build completed successfully on branch ${{ github.ref_name }}."

      - name: Run unit tests
        run: |
          python -m unittest discover -s tests

  versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate semantic version
        id: semver
        run: |
          pip install bump2version
          bump2version --dry-run --list patch | grep new_version= | cut -d= -f2 > .version
          cat .version

      - name: Save version
        id: version
        run: echo "VERSION=$(cat .version)" >> $GITHUB_ENV

  release:
    needs: versioning
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.VERSION }}"
          release_name: "Release v${{ env.VERSION }}"
          draft: false
          prerelease: false
      - name: Check if tag exists
        id: tag_check
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_ENV
          else
            echo "tag_exists=false" >> $GITHUB_ENV
          fi

      - name: Create GitHub release
        if: env.tag_exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
        tag_name: "v${{ env.VERSION }}"
        release_name: "Release v${{ env.VERSION }}"
        draft: false
        prerelease: false

      - name: Send Telegram Alarm
        run: |
          python telegram_alarm.py "${{ secrets.TELEGRAM_BOT_TOKEN }}" "${{ secrets.TELEGRAM_CHAT_ID }}" "New release created: v${{ env.VERSION }}."


